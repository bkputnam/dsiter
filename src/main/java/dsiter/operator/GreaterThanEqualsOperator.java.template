package dsiter.operator;

${Disclaimer}

import dsiter.row.ColumnType;
import dsiter.row.IRowAccessor;
import dsiter.row.IRowAccessor;

/**
 * Binary operator that tests whether {@code lhs} is greater than or equal
 * to {@code rhs}
 *
 * <p>
 *     You probably won't ever want to use this class directly;
 *     it's much simpler to use {@link dsiter.operator.parser.OperatorParser}
 *     directly. However, I certainly won't tell you you can't!
 * </p>
 */
public class GreaterThanEqualsOperator extends TypedBinaryOperator {

	public GreaterThanEqualsOperator(IRowAccessor lhs, IRowAccessor rhs) {
		super(lhs, rhs);
	}

	@Override
	public ColumnType getReturnType(ColumnType lhsType, ColumnType rhsType) {
		return ColumnType.BOOLEAN;
	}

	@Override
	protected boolean testTypeCompatibility(ColumnType lhsType, ColumnType rhsType) {
		return (lhsType.isNumeric() && rhsType.isNumeric());
	}

	<%
		def numberTypes = ["int", "long", "float", "double"]
		numberTypes.each { lhsType ->
			numberTypes.each { rhsType ->
	%>
	@Override
	protected boolean handle_${lhsType}_${rhsType}_boolean(${lhsType} lhs, ${rhsType} rhs) { return lhs >= rhs; }
	<% }} %>
}
