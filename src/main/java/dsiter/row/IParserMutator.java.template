package dsiter.row;

import java.text.NumberFormat;
import java.time.Instant;

/**
 * Interface for classes that parse strings and insert them directly into
 * Rows.
 *
 * <p>
 *     You probably won't have to implement this interface yourself: it
 *     comes with default implementations for all the standard types
 *     (e.g. uses {@code Integer.parseInt} for ints, {@code Boolean.parseBoolean}
 *     for booleans, etc. The only reason to make a custom implementation
 *     is if you want to parse values in some other format.
 * </p>
 */
public interface IParserMutator {

    /**
     * Parse a string value and insert it into the passed Row
     *
     * @param value The string value to be parsed
     * @param row   The Row to be modified
     */
    void parseAndMutate(String value, Row row) throws Exception;

    /**
     * Given a ColumnType and an index, return an {@code IParserMutator}
     * instance that parses that type and inserts it into Rows at the
     * specified index.
     *
     * @param type  The type to be parsed
     * @param index The location at which the parsed values should be
     *              inserted
     * @return An {@code IParserMutator} instance that parses
     * {@code type} values and inserts them at {@code index}
     */
    static IParserMutator getInstance(ColumnType type, int index) {

        NumberFormat parser; // shared variable, used by some of the parsers

        switch (type) {
            <%
                def preambles = [
                    "INT": "parser = NumberFormat.getIntegerInstance(java.util.Locale.US);",
                    "LONG": "parser = NumberFormat.getIntegerInstance(java.util.Locale.US);",
                    "JSDATE": "",
                    "FLOAT": "parser = NumberFormat.getNumberInstance(java.util.Locale.US);",
                    "DOUBLE": "parser = NumberFormat.getNumberInstance(java.util.Locale.US);",
                    "STRING": "",
                    "BOOLEAN": ""
                ];
                def parserExprs = [
                    "INT": "parser.parse(value).intValue()",
                    "LONG": "parser.parse(value).longValue()",
                    "JSDATE": "Instant.parse(value).getEpochSecond()",
                    "FLOAT": "parser.parse(value).floatValue()",
                    "DOUBLE": "parser.parse(value).doubleValue()",
                    "STRING": "value",
                    "BOOLEAN": "Boolean.parseBoolean(value)"
                ];
                ColumnTypes.each { type ->
                    preamble = preambles[type.type];
                    parseExpr = parserExprs[type.type]
            %>
            case ${type.type}:
                ${preamble}
                return new IParserMutator() {
                    @Override
                    public void parseAndMutate(String value, Row row) throws Exception {
                        row.${type.rowArray}[index] = ${parseExpr};
                    }
                };
            <% } %>
            default:
                throw new Error("Programmer Error: this should be impossible");
        }
    }
}
