package dsiter.row;

/**
 * Non-instantiable class whose static methods can be used to get
 * instances of {@link IRowAccessor} that only return a single
 * constant value.
 *
 * <p>
 *     For example, one might use a constant accessor when computing
 *     the cube root of a column:
 * </p>
 * <pre>{@code
 * IRowAccessor cubeRootAccessor = new NthRootOperator(
 * 	someColumnAccessor,
 * 	ConstantAccessor.getInstance(3)
 * );
 * }</pre>
 */
public final class ConstantAccessor {

   private ConstantAccessor() {
       throw new AssertionError("Programmer Error: this should be impossible");
   }

	<% ColumnTypes.each { type -> %>
	/**
	 * Construct and return a new {@link IRowAccessor.${type.type}} which
	 * always returns {@code value}
	 *
	 * @param value The constant value to be returned by the IRowAccessor
	 * @return An {@link IRowAccessor.${type.type}} that always returns
	 * 		{@code value}
	 */
	public static IRowAccessor.${type.type} getInstance(${type.nativeType} value) {
		return new IRowAccessor.${type.type}() {
			@Override
			public ${type.nativeType} get${type.capitalized}FromRow(Row row) {
				return value;
			}
		};
	}
	<% } %>
}
