package dsiter.row;

/**
 * Class that manages copying data from one {@link Row} to another.
 *
 * <p>
 *     Since it's moderately common for Rows to contain values not linked to
 *     actual columns (not all values in the Row are described by a
 *     {@link ColumnDescriptor} instance), this class requires a
 *     {@code ColumnDescriptor[]} and will
 *     only copy over the described columns. This means that the destination
 *     Row may have a different shape than the source Row (always
 *     less-than-or-equal to the source shape in every dimension). It also means
 *     that the {@link ColumnDescriptor#getRowArrayIndex()} values for a
 *     given column may change, and that the destination Row must therefore
 *     be descibed by a different {@code ColumnDescriptor[]} than the source
 *     Row. This class provides functionality to handle all of that.
 * </p>
 */
public class RowCopier {

	<% ColumnTypes.each { type -> %>
	private int[] src${type.capitalized}Indexes;<% } %>

	private RowShape shape;
	private ColumnDescriptor[] destCds;

	/**
	 * Construct a RowCopier that copies the specified columns
	 * to a new, potentially compacted Row
	 *
	 * @param srcCds Descriptors of the columns to be copied to
	 *               a new Row
	 */
	public RowCopier(ColumnDescriptor[] srcCds) {

		shape = new RowShape();

		for(int i=0; i<srcCds.length; i++) {
			shape.incrNum(srcCds[i].getType());
		}

		<% ColumnTypes.each { type -> %>
		src${type.capitalized}Indexes = new int[shape.getNum${type.capitalized}s()];<% } %>

		destCds = new ColumnDescriptor[srcCds.length];

		shape = new RowShape(); // reset to all 0's
		for(int i=0; i<srcCds.length; i++) {
			ColumnDescriptor cd = srcCds[i];
			IColumnAccessor ca = cd.getAccessor();
			ColumnType type = ca.getType();
			shape.incrNum(type);
			int index = shape.getNum(type) - 1;

			destCds[i] = new ColumnDescriptor(
				cd.getName(),
				cd.getType(),
				index
			);

			switch(type) {
				<% ColumnTypes.each { type -> %>
				case ${type.type}: src${type.capitalized}Indexes[index] = ca.getIndex(); break;<% } %>
				default:
					throw new Error("This should be impossible");
			}
		}
	}

	/**
	 * Get the shape of the destination Row. This shape will
	 * be less-than-or-equal-to the source Row's shape in every
	 * dimension.
	 *
	 * @return	The shape of the destination row
	 */
	public RowShape getDestShape() {
		return new RowShape().add(shape);
	}

	/**
	 * Get column descriptors that describe the destination Row
	 *
	 * @return Descriptions of every column in the destination Row
	 */
	public ColumnDescriptor[] getDestColumnDescriptors() {
		return destCds;
	}

	/**
	 * Copy the source Row to the destination Row, using the previously
	 * configured {@link ColumnDescriptor}s as a guide.
	 *
	 * @param src  The Row to be copied from
	 * @param dest The Row to be copied to
	 */
	public void copyTo(Row src, Row dest) {
		<%
		    ColumnTypes.each { type ->
				def array = "src${type.capitalized}Indexes";
		%>
		for(int i=0; i<${array}.length; i++) {
			dest.${type.rowArray}[i] = src.${type.rowArray}[${array}[i]];
		}
		<% } %>
	}
}
