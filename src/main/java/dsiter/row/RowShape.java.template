package dsiter.row;

/**
 * Class that describes the "shape" of a {@link Row}. The shape of a {@code Row}
 * is simply the size of each array in the row (i.e. the number of ints, the
 * number of longs, the number of floats, etc).
 */
public class RowShape {
	<% ColumnTypes.each { type -> %>
	private int num${type.capitalized}s;<% } %>

	/**
	 * Construct a new RowShape with all dimensions set to {@code 0}
	 */
	public RowShape() {
		this(<% print ColumnTypes.collect({ type -> "0" }).join(", ") %>);
	}

	/**
	 * Construct a new RowShape of the specified dimensions.
	 *
	 * <% ColumnTypes.each { type -> %>
	 * @param num${type.capitalized}s\t\tThe number of ${type.nativeType}s<% } %>
	 */
	public RowShape(<% print ColumnTypes.collect({ type -> "int num" + type.capitalized + "s" }).join(", ") %>) {
		<% ColumnTypes.each { type -> %>
		this.num${type.capitalized}s = num${type.capitalized}s;<% } %>
	}

	/**
	 * Construct a new RowShape from a set of
	 * {@link ColumnDescriptor}s (counts the number
	 * of columns of each type)
	 *
	 * <p>
	 *     Note: this will fail to construct an accurate
	 *     RowShape if the Rows in question contain
	 *     "deleted" values that are not described by
	 *     any of the passed {@link ColumnDescriptor}s.
	 * </p>
	 *
	 * @param cds The columns that describe the Row
	 *            in question
	 */
	public RowShape(ColumnDescriptor[] cds) {
		for(int i=0; i<cds.length; i++) {
			incrNum(cds[i].getType());
		}
	}

	<% ColumnTypes.each { type -> %>
	/**
	 * Return the number of ${type.nativeType}s in the current shape
	 *
	 * @return The number of ${type.nativeType}s in the current shape
	 */
	public int getNum${type.capitalized}s() { return num${type.capitalized}s; }
	<% } %>

	<%
	def typeSwitch(indent, varName, bodyGenerator) {
		ColumnTypes.eachWithIndex { type, index ->
			println ""
			print indent;
			if(index == 0) { print "if" } else { print "else if" }
			println "(" + varName + " == ColumnType." + type.type + ") {"
			bodyGenerator(indent + "\t", type)
			print "\n" + indent + "}"
		}
		println "\n" + indent + "else {"
		println indent + "\tthrow new Error(\"This should be impossible\");"
		print indent + "}"
	}
	%>

	/**
	 * Get the number of values of the specified type in this shape.
	 *
	 * <p>
	 * 	For example, if {@code type == ColumnType.INT}, this is equivalent
	 * 	to calling {@link #getNumInts()}
	 * </p>
	 *
	 * @param type	The type whose count is to be returned
	 * @return The number of {@code type} values in the current shape
	 */
	public int getNum(ColumnType type) {
		<% typeSwitch("\t\t", "type") { indent, type ->
				print indent + "return getNum" + type.capitalized + "s();"
		} %>
	}

	/**
	 * Set the number of values of the specified type in this shape.
	 *
	 * @param type	The type whose count is to be modified
	 * @param num	The new count of {@code type} values
	 */
	public void setNum(ColumnType type, int num) {
		<% typeSwitch("\t\t", "type") { indent, type ->
				print indent + "num" + type.capitalized + "s = num;"
		} %>
	}

	/**
	 * Increment the number of values of the specified type in this shape.
	 *
	 * <p>
	 * 	This is equivalent to (but more efficient than) calling
	 * 	{@code setNum(type, getNum(type)+1)}
	 * </p>
	 *
	 * @param type	The type whose count is to be incremented
	 */
	public void incrNum(ColumnType type) {
		<% typeSwitch("\t\t", "type") { indent, type ->
				print indent + "num" + type.capitalized + "s++;"
		} %>
	}

	/**
	 * Return a new RowShape instance whose counts are the sums of the
	 * counts of the passed RowShapes. Will not modify either
	 * {@code shape1} or {@code shape2}.
	 *
	 * @param shape1	One shape to be summed
	 * @param shape2	The other shape to be summed
	 * @return			A new RowShape instance representing the sum
	 *					of the two parameters
	 */
	public static RowShape add(RowShape shape1, RowShape shape2) {
		return new RowShape(
			<% ColumnTypes.eachWithIndex { type, index -> %><% if(index > 0) { %>,<% } %>
			shape1.num${type.capitalized}s + shape2.num${type.capitalized}s<% } %>
		);
	}

	/**
	 * Return a new RowShape instance whose counts are the sums of the
	 * current RowShape and the passed RowShape. Will not modify either
	 * the current RowShape or the passed RowShape.
	 *
	 * <p>
	 * 	{@code shapeA.add(shapeB)} is equivalent to {@code RowShape.add(shapeA, shapeB)}
	 * </p>
	 *
	 * @param other	The RowShape to be summed with the current RowShape
	 * @return		A new RowShape instance representing the sum of the two RowShapes
	 */
	public RowShape add(RowShape other) {
		return RowShape.add(this, other);
	}
}