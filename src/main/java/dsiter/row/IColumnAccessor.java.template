package dsiter.row;

/**
 * An extension of {@link IRowAccessor} for implementations that simply
 * access a Column within a {@link Row} and return that value. The only
 * addition to the base interface is the {@link #getIndex()} method which
 * returns the type-specific index at which the column's value can be
 * found (similar to {@link ColumnDescriptor#getRowArrayIndex()}). When
 * possible, it is usually cleaner to use the super-type {@code IRowAccessor}
 * unless you really need to use the {@code getIndex()} method (occasionally
 * useful for copying IColumnAccessor instances, etc).
 *
 * <p>
 *     Like {@link IRowAccessor}, this interface defines inner interfaces
 *     that are type-specific versions of itself, and extend the
 *     type-specific version of {@code IRowAccessor}. For example,
 *     {@link IColumnAccessor.INT} extends {@link IRowAccessor.INT} and
 *     therefore requires both {@link #getIndex()} and
 *     {@link dsiter.row.IRowAccessor.INT#getIntFromRow(Row)} to be
 *     defined.
 * </p>
 *
 * <p>
 *     Although this is an interface, concrete type-specific instances can
 *     be obtained via {@link #getInstance(ColumnType, int)}. It is unlikely
 *     that implementors will want to extend this interface themselves,
 *     instead simply using the types returned by {@code getInstance(...)}
 * </p>
 */
public interface IColumnAccessor extends IRowAccessor {

	/**
	 * Get the type-specific index at which this column's
	 * value can be accessed.
	 *
	 * @see ColumnDescriptor#getRowArrayIndex()
	 * @return	The index at which this column can be accessed,
	 * 		within the {@link Row}'s type-appropriate array.
	 */
	int getIndex();

	<% ColumnTypes.each { type -> %>
	/**
	 * An {@link IColumnAccessor} that is also an {@link IRowAccessor.${type.type}}
	 */
	interface ${type.type} extends IColumnAccessor, IRowAccessor.${type.type} {
		@Override
		default ${type.nativeType} get${type.capitalized}FromRow(Row row) {
			return row.${type.rowArray}[getIndex()];
		}
	}
	<% } %>

	/**
	 * Get a type-specific instance of {@link IColumnAccessor}. The column's
	 * value will be read from the {@code index}-th position of the
	 * type-appropriate array in the {@link Row}
	 *
	 * @param type  The type of the column
	 * @param index The index at which to read the column's value
	 * @return		An appropriately-typed instance of {@link IColumnAccessor}
	 */
	static IColumnAccessor getInstance(ColumnType type, int index) {
		switch (type) {
			<% ColumnTypes.each { type -> %>
			case ${type.type}: return new ${type.type}() {
				@Override
				public int getIndex() { return index; }
			};
			<% } %>
			default:
				throw new Error("Programmer Error: this should be impossible");
		}
	}
}

