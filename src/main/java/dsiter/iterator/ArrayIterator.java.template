package dsiter.iterator;

import dsiter.row.*;
import dsiter.pipe.IPipe;
import dsiter.pipe.SkipPipe;

/**
 * An iterator over an array. The array may be
 * of any type in {@code ColumnTypes}. The returned
 * Rows will have one value of that type, named
 * {@code value}.
 */
public class ArrayIterator implements IDatasetIterator {

	private int index;
	private int length;
	private Row row;
	private ColumnType type;
	private RowWriter writer;

	private ArrayIterator() {
		row = new Row();
		index = -1;
	}

	<% ColumnTypes.each { type -> %>
	/**
	 * Construct a new ArrayIterator with type {@code ColumnType.${type.type}}
	 * @param values the values to iterator over
	 * @return An IDatasetIterator over the passed values
	 */
	public static ArrayIterator from${type.capitalized}s (${type.nativeType}... values) {
		ArrayIterator result = new ArrayIterator();
		result.row.${type.rowArray} = new ${type.nativeType}[1];
		result.length = values.length;
		result.type = ColumnType.${type.type};
		result.writer = result.new ${type.type}(values);
		return result;
	}
	<% } %>

	@Override
	public boolean tryMoveNext() {
		if(index < length-1) {
			index++;
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public Row getCurrentRow() {
		writer.writeToRow(row);
		return row;
	}

	@Override
	public long tryGetLength() {
		return length;
	}

	@Override
	public ColumnDescriptor[] getColumnDescriptors() {
		return new ColumnDescriptor[] {
			new ColumnDescriptor("value", type, 0)
		};
	}

	@Override
	public void close() {
		// do nothing
	}

	@Override
	public boolean tryAbsorb(IPipe pipe) {
		if (pipe instanceof SkipPipe) {
			long howMany = ((SkipPipe)pipe).getHowMany();
			index += howMany;
			return true;
		}
		else {
			return false;
		}
	}

	private interface RowWriter {
		void writeToRow(Row row);
	}

	<% ColumnTypes.each { type -> %>
	private class ${type.type} implements RowWriter{
		private ${type.nativeType}[] arr;

		public ${type.type}(${type.nativeType}[] arr) {
			this.arr = arr;
		}

		@Override
		public void writeToRow(Row row) {
			row.${type.rowArray}[0] = arr[index];
		}
	}
	<% } %>
}
