package dsiter.parser.ast;

import dsiter.row.ColumnDescriptor;
import dsiter.row.IRowAccessor;
import dsiter.row.Row;
import org.junit.Test;
import static org.junit.Assert.*;

public class TestGreaterThanOperator {

	@Test
	public void testMatches() {
		TestMatch.testBinaryOperator((lhs, rhs) -> new GreaterThanOperator(lhs, rhs));
	}

	<%
		def typeLookup = ColumnTypes.collectEntries { type ->
			[(type.type): type]
		}

		def numericTypes = ["INT", "LONG", "FLOAT", "DOUBLE"].collect { name ->
			typeLookup[name]
		}

		def typePairs = []

		numericTypes.each { lhsType ->
			numericTypes.each { rhsType ->
				typePairs << new Tuple(lhsType, rhsType)
			}
		}

		typePairs << new Tuple(typeLookup["JSDATE"], typeLookup["JSDATE"])
		typePairs << new Tuple(typeLookup["JSDATE"], typeLookup["INT"])
		typePairs << new Tuple(typeLookup["JSDATE"], typeLookup["LONG"])
		typePairs << new Tuple(typeLookup["INT"], typeLookup["JSDATE"])
		typePairs << new Tuple(typeLookup["LONG"], typeLookup["JSDATE"])

		typePairs.each { pair ->
			def lhs = pair.get(0)
			def rhs = pair.get(1)
	%>
	@Test
	public void test${lhs.capitalized}Lt${rhs.capitalized}() {
		AstNode x = new GreaterThanOperator(
			new ConstantOperator.${lhs.type}(0),
			new ConstantOperator.${rhs.type}(1)
		);
		IRowAccessor y = x.link(new ColumnDescriptor[0]);
		assertEquals(false, y.getValueFromRow(new Row()));
	}
	@Test
	public void test${lhs.capitalized}Eq${rhs.capitalized}() {
		AstNode x = new GreaterThanOperator(
			new ConstantOperator.${lhs.type}(1),
			new ConstantOperator.${rhs.type}(1)
		);
		IRowAccessor y = x.link(new ColumnDescriptor[0]);
		assertEquals(false, y.getValueFromRow(new Row()));
	}
	@Test
	public void test${lhs.capitalized}Gt${rhs.capitalized}() {
		AstNode x = new GreaterThanOperator(
			new ConstantOperator.${lhs.type}(1),
			new ConstantOperator.${rhs.type}(0)
		);
		IRowAccessor y = x.link(new ColumnDescriptor[0]);
		assertEquals(true, y.getValueFromRow(new Row()));
	}
	<%
		}
	%>
}
