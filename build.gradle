import groovy.json.JsonSlurper

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
	testCompile 'junit:junit:4.+'
}

sourceCompatibility = 1.8

task wrapper(type: Wrapper) { gradleVersion = '2.12' }

task applyTemplates(type: Copy) {
	def templateConfigFile = file("src/build/resources/templateConfig.json").absolutePath
	inputs.file templateConfigFile

	from "src/main/java"
	into "src/main/java"
	include "**/*.java.template"

	rename { filename -> filename - ~/\.template$/ }
	expand new JsonSlurper().parse(new File(templateConfigFile))

	def isInComment = false
	def prefix = "/* GENERATED CODE */"
	filter { line ->
		if(line.indexOf("/*") > -1) {
			isInComment = true
		}
		if(isInComment) {
			if(line.indexOf("*/") > -1) {
				isInComment = false
			}
			return (" " * prefix.length()) + line;
		}
		else {
			return prefix + line;
		}
	}
}

task applyTestTemplates(type: Copy) {
	def templateConfigFile = file("src/build/resources/templateConfig.json").absolutePath
	inputs.file templateConfigFile

	from "src/test/java"
	into "src/test/java"
	include "**/*.java.template"

	rename { filename -> filename - ~/\.template$/ }
	expand new JsonSlurper().parse(new File(templateConfigFile))
}

compileJava.dependsOn applyTemplates
compileTestJava.dependsOn applyTestTemplates

tasks.withType(JavaCompile){
    options.compilerArgs += '-Xlint:unchecked'
}

test {
	testLogging {
		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				println "\nResults: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			}
		}
	}
}

